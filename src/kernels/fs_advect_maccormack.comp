#version 430 core

// Built-in Variables
// in uvec3 gl_NumWorkGroups;
// in uvec3 gl_WorkGroupID;
// in uvec3 gl_LocalInvocationID;
// in uvec3 gl_GlobalInvocationID;      Represents [x,y,z] position in grid
// in uint  gl_LocalInvocationIndex;

layout(local_size_x = 1, local_size_y = 1) in;

uniform sampler3D u;            // Velocity field

uniform sampler3D q_prev;       // Quantity q to be advected
uniform image3D q_solid;        // Quantity q related directly to the solid
uniform float q_air;            // Ambient quantity q related to the air
uniform image3D q_next;         // Buffer to store advected quantities q

uniform image3D world_mask;     // Mask which shows the solid, fluid, and air

uniform vec3 scale;             // Dimensions of a cell in x,y,z
uniform float dt;               // Delta time

ivec3 center() {
    return ivec3(gl_GlobalInvocationID);
}

bool isSolidCell(ivec3 index) {
    return imageLoad(world_mask, index).r = 0.0;
}

bool isAirCell(ivec3 index) {
    return imageLoad(world_mask, index).r = 1.0;
}

vec3 cell2texture(vec3 index) {
    return index / vec3(gl_NumWorkGroups);
}

void main() {
    vec4 sample;

    // Sample Values
    if (isSolidCell(center())) {
        // Solid-cell => use value from solid 
        sample = imageLoad(q_solid, center());
    } else if (isAirCell(center())) {
        // Air-cell => use air value 
        sample = q_air;
    } else {
        // Fluid-cell => advect
        // Step 1: Solve for phi_next_hat
        vec4 phi_next_hat;

        // Get position of cell in index-space
        vec3 pos = vec3(gl_GlobalInvocationID));
        pos += vec3(0.5, 0.5, 0.5);
        vec3 npos = pos;

        // Advect backwards
        vec3 vel = texture(u, cell2texture(npos)).rgb;
        npos *= scale;
        npos -= dt * vel;
        npos /= scale;

        // Sample advected quantity
        vec4 phi_next_hat = texture(q_prev, cell2texture(npos));


        // Step 2: Solve for phi_hat
        // Get index of the cell we landed on, clamping to closest index
        vec3 nnpos = npos;

        // Sample velocity and reverse it (for reversed advection)
        vel = texture(u, cell2texture(npos)).rgb;
        vel *= -1.0;

        // Backtrack
        nnpos *= scale;
        nnpos -= dt * vel;
        nnpos /= scale;

        // We are now in the position which phi_next_hat would say is the past.
        // Calculate the advected term for this new position:
        vel = texture(u, cell2texture(nnpos)).rgb;
        nnpos *= scale;
        nnpos -= dt * vel;
        nnpos /= scale;
        vec4 phi_hat = texture(q_prev, cell2texture(nnpos));

        // (possible TODO if not stable) Check if we landed inside of a solid/air position

        // Step 3: Solve for phi
        vec4 phi = texture(q_prev, cell2texture(pos));

        // Step 4: Solve for phi_next
        vec4 phi_next = phi_next_hat + 0.5*(phi - phi_hat);

        // Step 5: Clamp to values in boxed range
        npos = floor(npos) + vec3(0.5, 0.5, 0.5);
        vec4 lowerbounds = texture(q_prev, cell2texture(npos));
        vec4 upperbounds = texture(q_prev, cell2texture(npos));

        for(int i = -1; i <= 1; i++) {
            for(int j = -1; j <= 1; j++) {
                for(int k = -1; k <= 1; k++) {
                    lowerbounds = min(lowerbounds, texture(q_prev, cell2texture(npos + vec3(float(i), float(j), float(k))));
                    upperbounds = min(lowerbounds, texture(q_prev, cell2texture(npos + vec3(float(i), float(j), float(k))));
                }
            }
        }

        sample = clamp(phi_next, lowerbounds, upperbounds);
    }
        
    // Write to buffer
    imageStore(target_buffer, center(), sample);
}