#version 430 core

// Built-in Variables
// in uvec3 gl_NumWorkGroups;
// in uvec3 gl_WorkGroupID;
// in uvec3 gl_LocalInvocationID;
// in uvec3 gl_GlobalInvocationID;      Represents [x,y,z] position in grid
// in uint  gl_LocalInvocationIndex;

layout(local_size_x = 1, local_size_y = 1) in;

layout(rgba32f) uniform image3D q;              // Quantity q
layout(rgba32f) uniform image3D q_solid;        // Quantity q related directly to the solid
uniform vec4 q_air;                             // Ambient quantity q related to the air
layout(rgba32f) uniform image3D div_q;          // Buffer to store div q

layout(rgba32f) uniform image3D world_mask;     // Mask which shows the solid, fluid, and air

ivec3 center() {
    return ivec3(gl_GlobalInvocationID);
}

ivec3 left() {
    return ivec3(int(gl_GlobalInvocationID.x) - 1,
                 int(gl_GlobalInvocationID.y),
                 int(gl_GlobalInvocationID.z));
}

ivec3 right() {
    return ivec3(int(gl_GlobalInvocationID.x) + 1,
                 int(gl_GlobalInvocationID.y),
                 int(gl_GlobalInvocationID.z));
}

ivec3 bottom() {
    return ivec3(int(gl_GlobalInvocationID.x),
                 int(gl_GlobalInvocationID.y) - 1,
                 int(gl_GlobalInvocationID.z));
}

ivec3 top() {
    return ivec3(int(gl_GlobalInvocationID.x),
                 int(gl_GlobalInvocationID.y) + 1,
                 int(gl_GlobalInvocationID.z));
}

ivec3 down() {
    return ivec3(int(gl_GlobalInvocationID.x),
                 int(gl_GlobalInvocationID.y),
                 int(gl_GlobalInvocationID.z) + 1);
}

ivec3 up() {
    return ivec3(int(gl_GlobalInvocationID.x),
                 int(gl_GlobalInvocationID.y),
                 int(gl_GlobalInvocationID.z) - 1);
}

bool isSolidCell(ivec3 index) {
    return imageLoad(world_mask, index).r == 0.0;
}

bool isAirCell(ivec3 index) {
    return imageLoad(world_mask, index).r == 1.0;
}

void main() {
    vec4 ql = imageLoad(q, left());
    vec4 qr = imageLoad(q, right());
    vec4 qb = imageLoad(q, bottom());
    vec4 qt = imageLoad(q, top());
    vec4 qd = imageLoad(q, down());
    vec4 qu = imageLoad(q, up());

    if (isSolidCell(left())) {
        ql = imageLoad(q_solid, left());
    } else if (isAirCell(left())) {
        ql = q_air;
    }

    if (isSolidCell(right())) {
        qr = imageLoad(q_solid, right());
    } else if (isAirCell(right())) {
        qr = q_air;
    }

    if (isSolidCell(bottom())) {
        qb = imageLoad(q_solid, bottom());
    } else if (isAirCell(bottom())) {
        qb = q_air;
    }

    if (isSolidCell(top())) {
        qt = imageLoad(q_solid, top());
    } else if (isAirCell(top())) {
        qt = q_air;
    }

    if (isSolidCell(down())) {
        qd = imageLoad(q_solid, down());
    } else if (isAirCell(down())) {
        qd = q_air;
    }

    if (isSolidCell(up())) {
        qu = imageLoad(q_solid, up());
    } else if (isAirCell(up())) {
        qu = q_air;
    }

    float d = 0.5*((qr.x - ql.x) + (qt.y - qb.y) + (qu.z - qd.z));
    
    // Write to buffer
    imageStore(div_q, center(), vec4(d, 0.0, 0.0, 0.0));
}