#version 430 core

// Built-in Variables
// in uvec3 gl_NumWorkGroups;
// in uvec3 gl_WorkGroupID;
// in uvec3 gl_LocalInvocationID;
// in uvec3 gl_GlobalInvocationID;      Represents [x,y,z] position in grid
// in uint  gl_LocalInvocationIndex;

layout(local_size_x = 1, local_size_y = 1) in;

layout(rgba16f) uniform image3D pressure;       // Pressure field iteration
layout(rgba16f) uniform image3D div_w;          // Divergence of unprojected velocity field
uniform float pressure_air;                     // Ambient quantity q related to the air
layout(rgba16f) uniform image3D pressure_next;  // Buffer to store next Jacobi iteration

layout(rgba16f) uniform image3D world_mask;     // Mask which shows the solid, fluid, and air

ivec3 center() {
    return ivec3(gl_GlobalInvocationID);
}

ivec3 left() {
    return ivec3(int(gl_GlobalInvocationID.x) - 1,
                 int(gl_GlobalInvocationID.y),
                 int(gl_GlobalInvocationID.z));
}

ivec3 right() {
    return ivec3(int(gl_GlobalInvocationID.x) + 1,
                 int(gl_GlobalInvocationID.y),
                 int(gl_GlobalInvocationID.z));
}

ivec3 bottom() {
    return ivec3(int(gl_GlobalInvocationID.x),
                 int(gl_GlobalInvocationID.y) - 1,
                 int(gl_GlobalInvocationID.z));
}

ivec3 top() {
    return ivec3(int(gl_GlobalInvocationID.x),
                 int(gl_GlobalInvocationID.y) + 1,
                 int(gl_GlobalInvocationID.z));
}

ivec3 down() {
    return ivec3(int(gl_GlobalInvocationID.x),
                 int(gl_GlobalInvocationID.y),
                 int(gl_GlobalInvocationID.z) + 1);
}

ivec3 up() {
    return ivec3(int(gl_GlobalInvocationID.x),
                 int(gl_GlobalInvocationID.y),
                 int(gl_GlobalInvocationID.z) - 1);
}

bool isSolidCell(ivec3 index) {
    return imageLoad(world_mask, index).r == 0.0;
}

bool isAirCell(ivec3 index) {
    return imageLoad(world_mask, index).r == 1.0;
}

void main() {
    float iter;
    float pC = imageLoad(pressure, center()).r;

    if (isAirCell(center()) || isSolidCell(center())) {
        iter = pressure_air;
    } else {
        float dC = imageLoad(div_w, center()).r;
        float pL = imageLoad(pressure, left()).r;
        float pR = imageLoad(pressure, right()).r;
        float pB = imageLoad(pressure, bottom()).r;
        float pT = imageLoad(pressure, top()).r;
        float pD = imageLoad(pressure, down()).r;
        float pU = imageLoad(pressure, up()).r;
        
        if (isSolidCell(left())) {
            //Effectively ignore contribution of this cell 
            pL = pC;
        } else if (isAirCell(left())) {
            pL = pressure_air;
        }

        if (isSolidCell(right())) {
            //Effectively ignore contribution of this cell
            pR = pC;
        } else if (isAirCell(right())) {
            //Simulate pressure discontinuity
            pR = pressure_air;
        }

        if (isSolidCell(bottom())) {
            //Effectively ignore contribution of this cell
            pB = pC;
        } else if (isAirCell(bottom())) {
            //Simulate pressure discontinuity
            pB = pressure_air;
        }

        if (isSolidCell(top())) {
            //Effectively ignore contribution of this cell
            pT = pC;
        } else if (isAirCell(top())) {
            //Simulate pressure discontinuity
            pT = pressure_air;
        }

        if (isSolidCell(down())) {
            //Effectively ignore contribution of this cell
            pD = pC;
        } else if (isAirCell(down())) {
            //Simulate pressure discontinuity
            pD = pressure_air;
        }

        if (isSolidCell(up())) {
            //Effectively ignore contribution of this cell
            pU = pC;
        } else if (isAirCell(up())) {
            //Simulate pressure discontinuity
            pU = pressure_air;
        }

        iter = (pL + pR + pB + pT + pD + pU) / 6.0;
    }

           
    // Write to buffer
    imageStore(pressure_next, center(), vec4(iter, 0.0, 0.0, 0.0));
}