#version 430 core

// Built-in Variables
// in uvec3 gl_NumWorkGroups;
// in uvec3 gl_WorkGroupID;
// in uvec3 gl_LocalInvocationID;
// in uvec3 gl_GlobalInvocationID;      Represents [x,y,z] position in grid
// in uint  gl_LocalInvocationIndex;

layout(local_size_x = 1, local_size_y = 1) in;

uniform sampler3D u;                            // Velocity field

uniform sampler3D q_prev;                       // Quantity q to be advected
layout(rgba32f) uniform image3D q_solid;        // Quantity q related directly to the solid
uniform float q_air;                            // Ambient quantity q related to the air
layout(rgba32f) uniform image3D q_next;         // Buffer to store advected quantities q

layout(rgba32f) uniform image3D world_mask;     // Mask which shows the solid, fluid, and air

uniform vec3 scale;                             // Dimensions of a cell in x,y,z
uniform float dt;                               // Delta time

ivec3 center() {
    return ivec3(gl_GlobalInvocationID);
}

bool isSolidCell(ivec3 index) {
    return imageLoad(world_mask, index).r == 0.0;
}

bool isAirCell(ivec3 index) {
    return imageLoad(world_mask, index).r == 1.0;
}

vec3 cell2texture(vec3 index) {
    return index / vec3(gl_NumWorkGroups);
}

void main() {
    vec4 sample;

    // Sample Values
    if (isSolidCell(center())) {
        // Solid-cell => use value from solid 
        sample = imageLoad(q_solid, ivec(gl_GlobalInvocationID));
    } else if (isAirCell(center())) {
        // Air-cell => use air value 
        sample = q_air;
    } else {
        // Fluid-cell => advect
        // Get position of cell in index-space
        vec3 pos = vec3(gl_GlobalInvocationID));
        pos += vec3(0.5, 0.5, 0.5);

        // Advect backwards
        vec3 vel = texture(u, cell2texture(pos)).rgb;
        pos *= scale;
        pos -= dt * vel;
        pos /= scale;

        // Sample advected quantity
        sample = texture(q_prev, cell2texture(pos));
    }
        
    // Write to buffer
    imageStore(q_next, center(), sample);
}